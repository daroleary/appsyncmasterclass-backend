service: appsync-darren
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-export-env
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 3008
  region: us-east-1
  stage: dev
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  tags:
    Cost Center: AppSync Proposals
    Infrastructure Service: AppSync
  stackTags:
    Cost Center: AppSync Proposals Stack
    Infrastructure Service: AppSync Stack
  environment:
    NODE_OPTIONS: --dns-result-order=ipv4first
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:custom.stage}
    APPSYNC_ENDPOINT_URL: https://5pxufbtwqbg6xicm7ne4inh27e.appsync-api.us-east-1.amazonaws.com/graphql
    COGNITO_USER_POOL_ID: us-east-1_lDEjvbxGo
    COGNITO_USER_POOL_CLIENT_ID: 5s0iv5mc3mbgi7d2ltlapb4h0h

package:
  exclude:
    - package-lock.json
    - package.json

custom:
    region: ${opt:region, self:provider.region}
    stage: ${opt:stage, self:provider.stage}
    export-env:
      filename: .env
      overwrite: true

appSync:
  ${file(./serverless.appsync-api.yml)}

functions:
  confirmUserSignup:
    handler: src/functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - cognito-idp:AdminUpdateUserAttributes
        Resource:
          Fn::Sub: "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}"

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: appsync-darren-user-pool-${self:custom.stage}
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: appsync-darren-user-pool-client-${self:custom.stage}
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
        RefreshTokenValidity: 30
        AllowedOAuthFlowsUserPoolClient: false
    # TODO: Replace with more restrictive policy
    AppSyncCloudWatchLogsRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'AppSyncLoggingPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - 'arn:aws:logs:*:*:*'

  Outputs:
    AwsRegion:
      Value: ${self:custom.region}
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
    CognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    # TODO: try and get this to populate properly using serverless-manifest-plugin
#    ApiUrl:
#      Value: !GetAtt Appsync-darren-dev.GraphQLUrl