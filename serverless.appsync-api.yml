name: appsync-darren-${self:custom.stage}
schema: schema.api.graphql
authentication:
  type: AMAZON_COGNITO_USER_POOLS
  config:
    userPoolId: !Ref CognitoUserPool
    awsRegion: ${aws:region}
    defaultAction: ALLOW

logging:
  roleArn: { 'Fn::GetAtt': [ 'AppSyncCloudWatchLogsRole', 'Arn' ] }
  level: 'ALL'  # Set to NONE, ERROR, or ALL
  retentionInDays: 3

substitutions:
  tweetsTable: !Ref TweetsTable

# see https://github.com/sid88in/serverless-appsync-plugin/blob/master/doc/pipeline-functions.md
pipelineFunctions:
  getMyProfile:
    dataSource: usersTable
    code: src/pipelineFunctions/getMyProfile.js

  getProfile:
    dataSource: usersTable
    code: src/pipelineFunctions/getProfile.js

  getFollowers:
    dataSource: relationshipsTable
    code: src/pipelineFunctions/getFollowers.js

  editMyProfile:
    dataSource: usersTable
    code: src/pipelineFunctions/editMyProfile.js

  getTweets:
    dataSource: tweetsTable
    code: src/pipelineFunctions/getTweets.js

  getMyTimeline:
    dataSource: timelinesTable
    code: src/pipelineFunctions/getMyTimeline.js

  getLikes:
    dataSource: likesTable
    code: src/pipelineFunctions/getLikes.js

  myProfileTweets:
    dataSource: tweetsTable
    code: src/pipelineFunctions/myProfileTweets.js

  otherProfileFollowing:
    dataSource: relationshipsTable
    code: src/pipelineFunctions/otherProfileFollowing.js

  otherProfileFollowedBy:
    dataSource: relationshipsTable
    code: src/pipelineFunctions/otherProfileFollowedBy.js

  tweetFunction:
    dataSource: tweet

  likeFunction:
    dataSource: like

  unlikeFunction:
    dataSource: unlike

  retweetFunction:
    dataSource: retweet

  followFunction:
    dataSource: follow

  # Nested Fields
  tweetProfile:
    dataSource: usersTable
    code: src/pipelineFunctions/tweetProfile.js

  likedProfile:
    dataSource: likesTable
    code: src/pipelineFunctions/likedProfile.js

  unhydratedTweetsPage:
    dataSource: tweetsTable
    code: src/pipelineFunctions/unhydratedTweetsPage.js

  tweetRetweeted:
    dataSource: retweetsTable
    code: src/pipelineFunctions/tweetRetweeted.js

  retweetOf:
    dataSource: tweetsTable
    code: src/pipelineFunctions/retweetOf.js

resolvers:
  Query.getMyProfile:
    functions:
      - getMyProfile

  Query.getProfile:
    functions:
      - getProfile

  Query.getTweets:
    functions:
      - getTweets

  Query.getMyTimeline:
    functions:
      - getMyTimeline

  Query.getLikes:
    functions:
      - getLikes

  Query.getFollowers:
    functions:
      - getFollowers

  Mutation.editMyProfile:
    functions:
      - editMyProfile

  Mutation.tweet:
    functions:
      - tweetFunction

  Mutation.like:
    functions:
      - likeFunction

  Mutation.unlike:
    functions:
      - unlikeFunction

  Mutation.retweet:
    functions:
      - retweetFunction

  Mutation.follow:
    functions:
      - followFunction

  # Nested Fields
  Tweet.profile:
    functions:
      - tweetProfile

  Retweet.profile:
    functions:
      - tweetProfile

  MyProfile.tweets:
    functions:
      - myProfileTweets

  OtherProfile.tweets:
    functions:
      - myProfileTweets

  OtherProfile.following:
    functions:
      - otherProfileFollowing

  OtherProfile.followedBy:
    functions:
      - otherProfileFollowedBy

  Tweet.liked:
    functions:
      - likedProfile

  UnhydratedTweetsPage.tweets:
    functions:
      - unhydratedTweetsPage

  Tweet.retweeted:
    functions:
      - tweetRetweeted

  Retweet.retweetOf:
    functions:
      - retweetOf

dataSources:
  none:
    type: NONE

  usersTable:
    type: AMAZON_DYNAMODB
    description: Users Table
    config:
      tableName: !Ref UsersTable

  tweetsTable:
    type: AMAZON_DYNAMODB
    description: Tweets Table
    config:
      tableName: !Ref TweetsTable

  timelinesTable:
    type: AMAZON_DYNAMODB
    description: Timelines Table
    config:
      tableName: !Ref TimelinesTable

  likesTable:
    type: AMAZON_DYNAMODB
    description: Likes Table
    config:
      tableName: !Ref LikesTable

  retweetsTable:
    type: AMAZON_DYNAMODB
    description: Retweets Table
    config:
      tableName: !Ref RetweetsTable

  relationshipsTable:
    type: AMAZON_DYNAMODB
    description: Relationships Table
    config:
      tableName: !Ref RelationshipsTable

  tweet:
    type: AWS_LAMBDA
    description: update dynamoDB with changes from new tweet
    config:
      function:
        handler: src/pipelineFunctions/tweet.handler
        environment:
          USERS_TABLE: !Ref UsersTable
          TWEETS_TABLE: !Ref TweetsTable
          TIMELINES_TABLE: !Ref TimelinesTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource: !GetAtt UsersTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt TweetsTable.Arn
              - !GetAtt TimelinesTable.Arn

  like:
    type: AWS_LAMBDA
    description: update dynamoDB with changes from like
    config:
      function:
        handler: src/pipelineFunctions/like.handler
        environment:
          LIKES_TABLE: !Ref LikesTable
          TWEETS_TABLE: !Ref TweetsTable
          USERS_TABLE: !Ref UsersTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt TweetsTable.Arn
              - !GetAtt UsersTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt LikesTable.Arn

  unlike:
    type: AWS_LAMBDA
    description: update dynamoDB with changes from unlike
    config:
      function:
        handler: src/pipelineFunctions/unlike.handler
        environment:
          LIKES_TABLE: !Ref LikesTable
          TWEETS_TABLE: !Ref TweetsTable
          USERS_TABLE: !Ref UsersTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt TweetsTable.Arn
              - !GetAtt UsersTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt LikesTable.Arn

  retweet:
    type: AWS_LAMBDA
    description: update dynamoDB with changes from new retweet
    config:
      function:
        handler: src/pipelineFunctions/retweet.handler
        environment:
          USERS_TABLE: !Ref UsersTable
          TWEETS_TABLE: !Ref TweetsTable
          TIMELINES_TABLE: !Ref TimelinesTable
          RETWEETS_TABLE: !Ref RetweetsTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt TweetsTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt UsersTable.Arn
              - !GetAtt TweetsTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt TweetsTable.Arn
              - !GetAtt TimelinesTable.Arn
              - !GetAtt RetweetsTable.Arn

  follow:
    type: AWS_LAMBDA
    description: update dynamoDB with changes from follow
    config:
      function:
        handler: src/pipelineFunctions/follow.handler
        environment:
          RELATIONSHIPS_TABLE: !Ref RelationshipsTable
          USERS_TABLE: !Ref UsersTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt UsersTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt RelationshipsTable.Arn