schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    getImageUploadUrl(extension: String, contentType: String): AWSURL!
    getMyTimeline(limit: Int!, nextToken: String): UnhydratedTweetsPage!
    getMyProfile: MyProfile!
    getProfile(screenName: String!): OtherProfile
    getTweet(tweetId: ID!): ITweet
    getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!
    getLikes(userId: ID!, limit: Int!, nextToken: String): UnhydratedTweetsPage!
    getFollowers(userId: ID!, limit: Int!, nextToken: String): [ProfilesPage!]
    getFollowing(userId: ID!, limit: Int!, nextToken: String): [ProfilesPage!]
}

type Mutation {
    editMyProfile(newProfile: ProfileInput!): MyProfile!
    tweet(text: String!): Tweet!
    like(tweetId: ID!): Boolean!
    unlike(tweetId: ID!): Boolean!
    retweet(tweetId: ID!): Retweet!
    unretweet(tweetId: ID!): Boolean!
    reply(tweetId: ID!, text: String!): Reply!
    follow(userId: ID!): Boolean!
    unfollow(userId: ID!): Boolean!

    notifyRetweeted(
        id: ID!
        userId: ID!
        tweetId: ID!
        retweetedBy: ID!
        retweetId: ID!
    ): Notification!
    @aws_iam

    notifyLiked(
        id: ID!
        userId: ID!
        tweetId: ID!
        likedBy: ID!
    ): Notification!
    @aws_iam
}

type Subscription {
    onNotified(userId: ID!, type: NotificationType): Notification
    @aws_subscribe(mutations: ["notifyRetweeted", "notifyLiked"])
}

input ProfileInput {
    name: String!
    imageUrl: AWSURL
    backgroundImageUrl: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthdate: AWSDate
}

interface IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageUrl: AWSURL
    backgroundImageUrl: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthdate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
}

type MyProfile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageUrl: AWSURL
    backgroundImageUrl: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthdate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
}

type OtherProfile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageUrl: AWSURL
    backgroundImageUrl: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthdate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
    following: Boolean!
    followedBy: Boolean!
}

interface ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
}

type Tweet implements ITweet {
    id: ID!
    profile: IProfile!
    text: String!
    replies: Int!
    likes: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
    createdAt: AWSDateTime!
}

type Reply implements ITweet {
    id: ID!
    profile: IProfile!
    inReplyToTweet: ITweet!
    inReplyToUsers: [IProfile!]
    text: String!
    replies: Int!
    likes: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
    createdAt: AWSDateTime!
}

type Retweet implements ITweet {
    id: ID!
    profile: IProfile!
    retweetOf: ITweet!
    createdAt: AWSDateTime!
}

type TweetsPage {
    tweets: [ITweet!]
    nextToken: String
}

type UnhydratedTweetsPage {
    tweets: [ITweet!]
    nextToken: String
}

type ProfilesPage {
    profiles: [IProfile!]
    nextToken: String
}

type Retweeted implements iNotification @aws_iam @aws_cognito_user_pools {
    id: ID!
    type: NotificationType!
    userId: ID!
    tweetId: ID!
    retweetedBy: ID!
    retweetId: ID!
    createdAt: AWSDateTime!
}

type Liked implements iNotification @aws_iam @aws_cognito_user_pools {
    id: ID!
    type: NotificationType!
    userId: ID!
    tweetId: ID!
    likedBy: ID!
    createdAt: AWSDateTime!
}

union Notification = Retweeted | Liked

interface iNotification {
    id: ID!
    type: NotificationType!
    userId: ID!
    createdAt: AWSDateTime!
}

enum NotificationType {
    Retweeted
    Liked
    Mentioned
    Replied
}